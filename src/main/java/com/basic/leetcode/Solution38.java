package com.basic.leetcode;

/**
 * 报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：
 *
 * 1.     1
 * 2.     11
 * 3.     21
 * 4.     1211
 * 5.     111221
 * 1 被读作  "one 1"  ("一个一") , 即 11。
 * 11 被读作 "two 1s" ("两个一"）, 即 21。
 * 21 被读作 "one 2",  "one 1" （"一个二" ,  "一个一") , 即 1211。
 *
 * 给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。
 *
 * 注意：整数顺序将表示为一个字符串。
 *
 *  
 *
 * 示例 1:
 *
 * 输入: 1
 * 输出: "1"
 * 示例 2:
 *
 * 输入: 4
 * 输出: "1211"
 *
 */
public class Solution38 {

    public static void main(String[] args) {
        Solution38 solution = new Solution38();
        System.out.println(solution.countAndSay(1));
        System.out.println(solution.countAndSay(2));
        System.out.println(solution.countAndSay(3));
        System.out.println(solution.countAndSay(4));
        System.out.println(solution.countAndSay(5));
        System.out.println(solution.countAndSay(6));
        System.out.println(solution.countAndSay(7));
        System.out.printlnequals(solution.countAndSay(30)));
    }

    public String countAndSay(int n) {
        String result = "1";
        while (n > 1) {
            result = nextStr(result);
            n --;
        }

        return result;
    }

    private String nextStr(String lastStr) {
        StringBuilder sb = new StringBuilder();
        if(lastStr.length() == 1) {
            return sb.append("11").toString();
        }

        int count = 1;
        int temp = lastStr.charAt(0);
        for(int i = 1; i < lastStr.length(); i++) {
            if(lastStr.charAt(i) == temp) {
                count ++;
            } else {
                sb.append(count);
                sb.append(lastStr.charAt(i - 1));

                temp = lastStr.charAt(i);
                count = 1;
            }

            if(i == lastStr.length() - 1) {
                sb.append(count);
                sb.append(lastStr.charAt(i));
            }
        }
        return sb.toString();
    }

}
